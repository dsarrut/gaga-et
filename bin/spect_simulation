#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from gaga_et import *

CONTEXT_SETTINGS = dict(help_option_names=["-h", "--help"])


@click.command(context_settings=CONTEXT_SETTINGS)
@click.argument("json_param", nargs=1)
@click.option("--angle", default=None, help="Spect angle if one single angle")
@click.option("--no_gaga", is_flag=True, default=False,
              help="Do not consider gaga info in the json file")
@click.option("--no_garf", is_flag=True, default=False,
              help="Do not consider garf info in the json file")
@click.option("--gaga_pth", default=None, help="GAN pth filename")
@click.option("--no_aa", is_flag=True, default=False,
              help="Do not consider angular acceptance")
@click.option("--heads", default=None, type=int, help="Number of heads 1-4")
@common_simu_options
def go(json_param,
       output_folder,
       visu,
       angle,
       threads,
       radionuclide,
       activity_bq,
       no_gaga,
       no_garf,
       no_aa,
       heads,
       gaga_pth):
    # get the param dic structure
    param = read_json_param(json_param)

    # update param from command line
    update_param(param, visu, threads, activity_bq, radionuclide)

    # start transcript
    param.output_folder = Transcript.start(output_folder)

    # angle
    param.angle = angle

    # gaga ? garf ?
    if no_gaga:
        param["gaga_pth"] = ""
    if gaga_pth is not None:
        param["gaga_pth"] = gaga_pth
    if no_garf:
        param["garf_pth"] = ""
    if no_aa:
        param["angular_acceptance"] = False
    if heads is not None:
        param["spect_heads"] = heads

    # print param
    print(json.dumps(param, indent=4, sort_keys=False))

    # create the simu
    sim = gate.Simulation()
    make_spect_simulation(sim, param)

    # run
    output = sim.start()

    # print stats at the end
    stats = output.get_actor("stats")
    print(stats.user_info.output)
    nse = gate.get_source_skipped_events(output, 'source')
    nz = gate.get_source_zero_events(output, 'source')
    print(f"True nb of events : {stats.counts.event_count}")
    print(f"PPS : {stats.pps}")
    stats.counts.event_count += nse
    p = nse / (stats.counts.event_count) * 100
    print(f"Number of skipped particles : {nse}/{stats.counts.event_count}   {p:.2f}%")
    p = nz / (stats.counts.event_count) * 100
    print(f"Number of zero    particles : {nz}/{stats.counts.event_count}  {p:.2f}%")
    print(f"Adjusted PPS : {stats.pps}")
    print(stats)

    # stop transcript
    Transcript.stop()

    # needed ?
    if not no_garf:
        gate.delete_run_manager_if_needed(sim)


# --------------------------------------------------------------------------
if __name__ == "__main__":
    go()
