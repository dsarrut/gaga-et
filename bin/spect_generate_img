#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import itk
import gaga_et
from box import Box
import json
import click
from pathlib import Path
import opengate as gate

CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])


@click.command(context_settings=CONTEXT_SETTINGS)
@click.argument("json_param", nargs=1)
@click.option('--n', '-n', default=1e4, help='Number of samples to generate')
@click.option('--verbose', '-v', default=15, help='Verbose 0-15')
@click.option('--output', '-o', help='Output filename.mhd (angle will be added)')
@click.option('--output_folder', '-f', help='Output folder')
@click.option('--split', '-s', is_flag=True, help='Split the finale image, one image per energy window')
def go(json_param, n, output, output_folder, split, verbose):
    """
    \b

    Simulation of a SPECT image:
    - input particles are generated from a GAN (gaga-phsp)
    - detector plane use ARF (garf) to create the image
    - this version does not use Gate/Geant4 -> both neural networks (GAN and GARF) are chained.

    """

    # open the param file
    param = {}
    if json_param:
        try:
            f = open(json_param, "r")
            param = json.load(f)
        except IOError:
            print(f"Cannot open input json file {json_param}")
            exit(0)
    param = Box(param)

    # input number of events
    param.n = int(float(n))

    # output folder, filename
    if output is not None:
        param.output_filename = output
    if output_folder is not None:
        param.output_folder = output_folder
    if 'output_folder' not in param:
        param.output_folder = './'
    if 'output_filename' not in param:
        param.output_filename = 'projection.mhd'

    # options
    if verbose>5:
        print(json.dumps(param, indent=4, sort_keys=False))

    # verbosity
    v = gaga_et.SpectProjectionVerbose()
    v.verbose = verbose
    param.verb = v

    # go
    img = gaga_et.spect_generate_images(param)

    # Output is one single image with the number of slices being the number
    # of angles times the number of energy windows

    # write
    f = str(Path(param.output_folder) / param.output_filename)
    v.print(5, f"Write {f}")
    itk.imwrite(img, f)

    # split ?
    if split:
        n = int(itk.size(img)[2] / param.spect_angles)
        outputs = gate.split_spect_projections([f], n)
        e = 0
        for o in outputs:
            ff = f.replace(".mhd", f"_{e}.mhd")
            itk.imwrite(o, ff)
            e += 1


# --------------------------------------------------------------------------
if __name__ == '__main__':
    go()
